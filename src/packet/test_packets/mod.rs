pub fn simple_answer() -> Vec<u8> {

	let data: Vec<u8> = vec![

		//// Header
		0x01, 0x46, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00,

		//// Question
		// www
		0x03, 0x77, 0x77, 0x77,
		// archlinux
		0b0000_1001,
		0b0110_0001,
		0b0111_0010,
		0b0110_0011,
		0b0110_1000,
		0b0110_1100,
		0b0110_1001,
		0b0110_1110,
		0b0111_0101,
		0b0111_1000,

		// org
		0b0000_0011,
		0b0110_1111,
		0b0111_0010,
		0b0110_0111,

		// Null Byte
		0b0000_0000,

		// QType
		0b0000_0000,
		0b0000_0001,

		// QClass
		0b0000_0000,
		0b0000_0001,

		//// ANSWER
		// Pointer to Q-name
		0b1100_0000,
		0b0000_1100,

		// Atype
		0b0000_0000,
		0b0000_0001,

		// Class
		0b0000_0000,
		0b0000_0001,

		// TTL
		0b0000_0000,
		0b0000_0000,
		0b0000_1010,
		0b0100_0101,

		// rdlength = 4
		0b0000_0000,
		0b0000_0100,

		// rdata
		0b0101_1111,
		0b1101_1001,
		0b1010_0011,
		0b1111_0110,
	];

	data
}

// All the way across the sky
pub fn double_answer() -> Vec<u8> {

	let data: Vec<u8> = vec![

		//// Header
		0x01, 0x46, 0x81, 0x80, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00,

		//// Question
		// www
		0x03, 0x77, 0x77, 0x77,
		// archlinux
		0b0000_1001,
		0b0110_0001,
		0b0111_0010,
		0b0110_0011,
		0b0110_1000,
		0b0110_1100,
		0b0110_1001,
		0b0110_1110,
		0b0111_0101,
		0b0111_1000,

		// org
		0b0000_0011,
		0b0110_1111,
		0b0111_0010,
		0b0110_0111,

		// Null Byte
		0b0000_0000,

		// QType
		0b0000_0000,
		0b0000_0001,

		// QClass
		0b0000_0000,
		0b0000_0001,

		//// ANSWER
		// Pointer to Q-name
		0b1100_0000,
		0b0000_1100,

		// Atype
		0b0000_0000,
		0b0000_0001,

		// Class
		0b0000_0000,
		0b0000_0001,

		// TTL
		0b0000_0000,
		0b0000_0000,
		0b0000_1010,
		0b0100_0101,

		// rdlength = 4
		0b0000_0000,
		0b0000_0100,

		// rdata
		0b0101_1111,
		0b1101_1001,
		0b1010_0011,
		0b1111_0110,

		//// ANSWER
		// Pointer to Q-name
		0b1100_0000,
		0b0000_1100,

		// Atype
		0b0000_0000,
		0b0000_0001,

		// Class
		0b0000_0000,
		0b0000_0001,

		// TTL
		0b0000_0000,
		0b0000_0000,
		0b0000_1010,
		0b0100_0101,

		// rdlength = 4
		0b0000_0000,
		0b0000_0100,

		// rdata
		0b0101_1111,
		0b1101_1001,
		0b1010_0011,
		0b1111_0110,
	];

	data
}

pub fn one_answer_one_authority() -> Vec<u8> {

	let data: Vec<u8> = vec![

		//// Header
		0x01, 0x46, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x00,

		//// Question
		// www
		0x03, 0x77, 0x77, 0x77,
		// archlinux
		0b0000_1001,
		0b0110_0001,
		0b0111_0010,
		0b0110_0011,
		0b0110_1000,
		0b0110_1100,
		0b0110_1001,
		0b0110_1110,
		0b0111_0101,
		0b0111_1000,

		// org
		0b0000_0011,
		0b0110_1111,
		0b0111_0010,
		0b0110_0111,

		// Null Byte
		0b0000_0000,

		// QType
		0b0000_0000,
		0b0000_0001,

		// QClass
		0b0000_0000,
		0b0000_0001,

		//// ANSWER
		// Pointer to Q-name
		0b1100_0000,
		0b0000_1100,

		// Atype
		0b0000_0000,
		0b0000_0001,

		// Class
		0b0000_0000,
		0b0000_0001,

		// TTL
		0b0000_0000,
		0b0000_0000,
		0b0000_1010,
		0b0100_0101,

		// rdlength = 4
		0b0000_0000,
		0b0000_0100,

		// rdata
		0b0101_1111,
		0b1101_1001,
		0b1010_0011,
		0b1111_0110,

		//// ANSWER
		// Pointer to Q-name
		0b1100_0000,
		0b0000_1100,

		// Atype
		0b0000_0000,
		0b0000_0001,

		// Class
		0b0000_0000,
		0b0000_0001,

		// TTL
		0b0000_0000,
		0b0000_0000,
		0b0000_1010,
		0b0100_0101,

		// rdlength = 4
		0b0000_0000,
		0b0000_0100,

		// rdata
		0b0101_1111,
		0b1101_1001,
		0b1010_0011,
		0b1111_0110,
	];

	data
}
